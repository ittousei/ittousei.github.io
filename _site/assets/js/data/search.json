[
  
  {
    "title": "周末小记",
    "url": "/posts/mononoke/",
    "date": "2025-05-25 23:50:00 +0800",
    "categories": "二次元",
    "content": "两周忙完了两场pre和一门期末考试，这个五月总算是闲了下来。正值幽灵公主在国内重映，趁着这个难得无事的周末，我终于看上了这部月初就想看但一直没能成行的电影。 . 说到宫崎骏电影的重映，这也是一条串联多年的时间线了，19年我还在读本科的时候，就与室友一同去看了千与千寻，23年又去院线重温了天空之城，到了25年又补完了幽灵公主，不知道我最爱的风之谷什么时候引进呢。 . 幽灵公主我之前其实并没有看过，因此本次观影还是难得的初见。宫崎骏的作品一般给人一种童话的印象，尽管作品中或多或少带点反战环保的隐喻，但这些作者想表达的东西大多会隐藏在潜台词中，以一种讲述童话故事的方式传达给观众。 . 幽灵公主的叙事方式，用一个词来概括的话，我觉得用“克系”最为贴切，影片开场的10分钟，便给观众们展现了一段断头断臂的戏码，要知道流血的场景在宫崎骏的作品都是相当罕见的。不过这些视觉上的冲击只是开胃小菜，克味最为浓厚的是本作的设定，幽灵公主的世界观中存在邪魔、山神超自然势力，但不同于日本传统文化中八百万神的形象，这里的邪魔、山神都是克系古神那般的不可名状的生物，是随意掌握人类生死的恐怖存在。男主阿席达卡更是影片一开篇便吃上了必死的诅咒，随着故事的推进，这一诅咒非但没有解除的迹象，反而一路把男主推到毁灭的边缘，直到结局前我还坚信男主要牺牲自己来拯救女主的生命了。不过宫崎骏终究不是宫崎英高，在压抑沉重了两个小时后，最后还是心善给观众整了个全员幸福的童话话题，换我当编剧可能就写成全灭了。 . 观影完毕，离开影院时发现隔壁是一家机厅，正好前段时间在b站上刷到up主在机厅打音游，于是临时在行程表上加了一项探店的行程。 . 不得不说设备还是挺齐全的，咱也是玩上太鼓和滚筒洗衣机的人了。3元一局的价格也很实惠，团购了一张25元的券爽打了一个半小时太鼓。虽然作为音游初学者手脑不是很协调，但能在公众场所公放术力口已经心满意足了。 . "
  },
  
  {
    "title": "星星公主",
    "url": "/posts/narutaru/",
    "date": "2025-05-18 02:30:00 +0800",
    "categories": "二次元",
    "content": "注：本文含大量剧透，请酌情阅读。 . 星星公主（なるたる）是鬼头莫宏执笔的知名黑深残作品。本来打算在b站云漫画的，不知道是因为剧情太反社会了还是其他原因，竟然没有一个UP主做漫画解读，于是便找到原作一口气看完了。 . 作品的大致设定是，地球上存在一种叫龙骸的生物，龙骸会与特定的人类建立精神连接，连接者可以用念力操控龙骸进行战斗，龙骸是不死之身，但连接者会和龙骸共享痛觉，可以理解成JOJO中替身使者那样的存在。不过JOJO的替身使者大多由猛男出演，即便受伤第二天也能满血复活，而星星公主的设定则相当恶趣味，龙骸只会与心智未成熟的儿童建立连接，这使得JOJO中那些硬汉角色遭遇的虐心情节，到了本作在十多岁的中学生身上就能看到。 . 故事的主线是元气少女希娜在海边捡到了龙骸生物星丸，之后偶然卷入到几个反社会中学生企图用龙骸毁灭世界的阴谋中，在结识了正义的伙伴鹤丸、女装大佬典夫、好闺蜜小明等同伴后，又经历了亲手杀死同学、同伴在面前死去等绝望事件，逐渐认识到世界的残酷。最后，自己在父亲和同伴以生命为代价的掩护下，挫败了反派的阴谋拯救了世界。 . 到此为止剧情还算正常，但是鬼头老贼用最后两话便把故事整了个大反转。 . 虽然反派的阴谋失败了，但对他们对世界造成的破坏已是既定事实，不明真相的群众把反派做的一系列缺德事全归咎到主角头上，对主角一行人开展了猎巫行动。在短短的两话中，希娜身边的亲朋好友全灭，仅剩自己一人幸存下来。当世界待你以恶意，你又当如何回应世界呢？鬼头给出的答案是“当然是毁灭世界啦”，于是希娜觉醒了自己真正的龙骸能力，顺手把人类灭绝了，留下自己和另一位龙骸能力者，两人成为新世界的亚当和夏娃重新创造人类。 . 尽管结局很超展开，但多少可以看出一些向《恶魔人》致敬的地方。同样是保护世界的英雄不受众人理解，同样是世界毁灭一切归于虚无。不过相比恶魔人的有始有终，星星公主的反转显得有些生硬欠缺打磨，不过结局营造出的意境还是挺对味的。剧情欠打磨的问题在漫画的后六章尤为明显，从美军入侵开始，剧情便一路暴走刹不住车，一下就快进到了反派批发核弹毁灭世界。而之前一章的苏联飞屋，尽管作为单元回十分出彩，但插到主线中却显得有些意义不明。 . 典夫的死是网上讨论度很高的一个桥段，我对于这段剧情的评价是极低的，它和故事的主线毫无关联，完全是出于作者对读者的恶意而刻意编排的。这让我想起了冈田和人的《いびつ》，通过安排极小概率的偶然事件，让陪伴了读者几十话的女主角小圆无意义的领了便当，只是单纯的为黑而黑。 . 总的来说，本作的内核和鬼头的另一部作品《地球防卫少年》很是相似，表面在写世界毁灭这种超现实的展开，内核实在写青春期的黑暗面。故事中的少年少女大多是问题儿童，有人在学校遭受了欺凌，有人渴望得到父母的关爱。希娜的同学小广是校园暴力的受害者，因为成绩优秀，班上的女生组成小团体对她欺凌恐吓，其他人虽然注意到了欺凌的存在，却冷眼旁观放任暴行发生。随着欺凌的变本加厉，一向是模范生的小广再也忍受不住，发动了龙骸在学校大闹一场，将欺凌自己的女生一一折磨至死，走上绝路的小广最后被好友希娜亲手杀死。尽管在故事中这是一场彻头彻尾的悲剧，但是排除这些超现实情节，放到现实中这何尝不也是悲剧，又有谁能制止这些欺凌行为呢？ . 回到之前的问题，当世界待你以恶意，你又当如何回应世界呢？ . "
  },
  
  {
    "title": "时间线重启",
    "url": "/posts/restart/",
    "date": "2025-05-17 22:03:00 +0800",
    "categories": "日常",
    "content": "时隔一年，我又找回了自己的github账号。去年4月，我怀着想要记录什么的心情搭建了这个博客，不过这份表达欲不久便随着博客的竣工消耗殆尽了。没办法，我就是这样一个心意不定的人。 . 一年后重新捡起博客的契机，是前段时间突然想起了我那两年前毕业的前推。两年前我前往海外求学，异国他乡孤苦伶仃。国外几乎没有夜生活，过了六点街上便是漆黑一片，大家要么各回各家，要么就是在酒吧寻欢作乐。作为一位深度社恐，酒吧自然是不可能去的，而家里又没等我的人，因此每天夜里唯一的消遣，就是葛优躺瘫在椅子上，倒上一杯快乐水，看上一晚管人直播。 . 说到直播，其实并没有多少管人直播给我看。国内直播的黄金时段是晚间19点到24点，由于观众流量大，热门主播都会选择在这个时段开播。因为时差的缘故，国内的黄金时段正好是我早起上课的时间，而我能闲下来的夜晚却是国内直播人数寥寥无几的早晨。到了国外没多久我便发现，在国内常看的几个主播都与我的作息有不小冲突，到了只能看录播的地步。就在这时，我与我推相遇了。 . 我推的出道时间很早，和国V的大前辈七海几乎是在同一时期出道的，但与七海这种集退役偶像、宅圈公主、社内一姐等众光环于一身的超级大物相比，我推在圈内是名副其实的小透明。尽管经过多年的账号运营，总算是积累了10w的粉丝，但直播间的日活却是门可罗雀，连百人都够不着。传闻主播圈子里有条潜规则，头部主播会威胁底边主播禁止她们在黄金时段开播，防止自己的流量被底边分走。这种说法自然是无稽之谈，因为头部主播一旦开播，底边无论播不播都是没人看的。我推便是这样的臭底边，迫于业界大物对黄金时段流量的霸占，我推只好另辟蹊径开设晨间电台，吸引上班通勤的观众，当然在我这里就变成了深夜电台。 . 说起我推，我早在几年前便知道有这样一号人物，但对她的了解也仅限于论坛常刷的水果蔬菜梗、和同期生的不仲云云，她的直播我是一次都没点进去过。和大多数观众一样，我也是个随大流的引流狗：阿梓开播101了，发几条弹幕嘲笑下饭操作，七海唱美丽之物，刷一波“不努力永无出头之日”。如今由于时差这些都看不了了，不过借此契机对我推却有了更深入的认识。 . 我推直播走的是邻家小女友的路线，直播内容以杂谈为主，会分享自己平日生活中的所见所闻，遇到烦恼和伤心事也会向观众们倾诉，偶尔会在直播间唱一些小甜歌，尽管唱功很不专业，但听着她的歌声，好像真有一个小女友在屏幕另一头和你打视频电话。直播看得多了，也慢慢了解了我推其人，她是魔都土著，但家境并不富裕，中学接触了二次元，作为coser和舞见在漫展上演出，大学考入了本地的一所三流高校，课余时间在b站上做电台主播补贴生活费，硕士留学日本东京，在那里接触到彩虹社萌生了做虚拟主播的想法，尝试投出简历意外被录用，于是正式作为管人出道。 . 如同她的管人生涯，我推的现实人生也是不折不扣的底边。研修生毕业后，我推回到家乡找了份班上，工作的忙碌，不久便把我推的青春朝气吃干抹净，学生时代的自由惬意一去不返。她的直播事业也在这段时期陷入低谷，由于加班加点的工作，每次等到她开播已是深夜，但是经由一整天工作的折磨，她又有什么留给观众的呢？这段日子的直播内容一言以蔽之，是日复一日的倒黑泥诉苦。工作和兼职（直播）不能兼顾，换成别人可能就慢慢减少直播的时间，等到无人在意的时候便悄悄毕业了。我推是一位理想主义者，可能心底还有一份偶像梦还没放下吧，她的选择是辞掉主业全职投入到管人事业中。 . 以上便是前情提要了，我们相遇的时间节点，正是我推辞掉主业全职直播，希望借晨间电台开启生涯第二春的时候。说来凑巧，我们都是迷失在人生道路上的迷路人，我随波逐流漂到大洋彼岸求学，却发现这里无处不存在着一层厚厚的障壁，让我难以融入；我推辞掉工作去追逐偶像梦，但全职的投入并没有让她的底边地位有所改观。全职后我推有了更多的直播时间，实现了早中晚一天三播连轴转，直播时长翻了好几番。那么努力会有回报吗？有但不多。刚开始全职的几个月，借助契而不舍的早播，我推的直播间的确热闹了不少，直播收入也有了可喜的改观，虽然还是比不上头部大物，不过总算能靠直播养活自己了。但不出几个月，可能是观众喜新厌旧了吧，营收又慢慢跌回了常态水平，这对我推的积极性造成了不小的打击，此后好几个月她的直播都处在不上不下的尴尬状态。 . 压死骆驼的最后一根稻草，是b站的装扮事件，我推素来有偶像包袱，希望b站能用她的角色形象设计一套专属装扮。当时我推所属的企划告知她，出装扮的要求是粉丝数达到20w、四个月的营收达到目标线。这些要求对于当时的我推无疑是很难达成的，她的粉丝增长已经停滞了一年有余，近几个月的营收离达线也有一段距离。尽管如此，还是要知其不可而为之，我推的做法是蹭当时最热门的二字游戏的热度，于是我最心心念念的小女友杂谈一夜间就全变成二字游戏直播了。别说这个方法还是颇有成效的，还真给她涨粉涨到了20w，至于营收就不用想了，二字游戏粉丝的钱是拿来充648的，又怎么会打给皮套人呢？最后因为营收未达标，童话终究未能实现，这套装扮还是难产了。值得玩味的是，同时期有一位其他公司旗下的管人，粉丝大概在3.5w左右，她的申请交上去没多久阿b便给她做了专属装扮，效率之高令人咋舌。不知道我推出个装扮如此艰难，是不是背后另有隐情呢？ . 至此我推的直播生涯到了尾声，之前我推营收困难的那几个月，我还支援了几个舰长想支持她度过难关，这回是再也挽留不住了。不过当时我也已毕业回国，回归了国内的生活节奏，不再像国外那时候能看直播看一晚上了。装扮事件后，我推又划水随意播了几个月，之后便毫不意外的宣布了毕业。似乎是怀念起了在日本求学的美好时光，她在管人毕业后又飞回了日本重新找了份工作，不知重新回到日本的她，是否会后悔当初毕业时回国当管人的决定呢？我推去了日本后又开了爱发电补贴生活费，但作为一位原教旨管人痴，在爱发电上写流水账日记的我推，已不再是那个每天和我打视频电话聊到深夜的小女友了，便不再继续关注了，只留下了她的ins账号作为纪念。 . 时间线跳到上个月，饱受PhD的学业折磨，在深夜失眠之余，我又想起了那个毕业两年多的女人。打开好久没用的ins，却发现自己怎么都记不起她的账号了（虽然最后还是找到了），又试着回忆她的直播内容，也有些模糊记不大清了。我不经有些害怕，这些当时看来很难忘的回忆，仅仅过了两年就经不起时间的消磨了吗？再过两年我又是否会完全忘记这一切呢？果然还是有必要把一切记录下来，便有了这篇我与我推相遇又分别的故事。 . V圈的大前辈无理Muri曾经说过，五月是值得辛勤工作的日子。值得记录的东西还有很多，我想以这个五月为开端，把荒废已久的博客重启起来。 . 后记：听说我推最近在日本跳槽失败了（） . "
  },
  
  {
    "title": "通知书开箱",
    "url": "/posts/admission-letter/",
    "date": "2024-07-22 00:27:00 +0800",
    "categories": "日常",
    "content": "周日中午，EMS送来了心心念念的录取通知书，我的博士申请也正式告一段落。 . 相较于收到本科录取通知书时的意气风发，这回我的心态变得平和了许多。一方面是研究生的录取门槛远水于本科，另一方面两段入学经历的意义截然不同。从高中进入大学，象征着一段崭新生活的开始，博士入学则更像是找了个班上，而我最讨厌上班了。 . 玩笑归玩笑，是否要读博其实纠结了相当久。从本科入学时立志科研成为大国工匠，到高年级时看到知乎上的学长学姐控诉读博的凄惨而萌生退意，再到大四升学时随波逐流还是申请了国外PhD，最后却戏剧性地喜提全聚德不得不读水硕就业。直到一年前水硕毕业准备进入社会搬砖，临到头来还是决定放弃到手的offer，捡回不知道扔在哪里的学术梦，又回到了学校这座象牙塔。 . 读博和就业两条路谈不上孰优孰劣，博士毕业的我可能拿不到今日的offer，而成为社畜的我也不再会有机会接触学术。只是仅在当下，我还是想再遵从一次自己的本心，也希望四年后的我不会为这个决定后悔吧。 . 虽然这条申博路走得一波三折很是坎坷，但从结果上还是实现了大一入学时的梦想走上了学术之道，可喜可贺。也感谢面试的老师能不计较我硕士阶段完全荒废了科研，网开一面收留我读书。 . 最后简单开个箱： . 做题家特供EMS信封。 . 交大的时尚小垃圾还是给得很慷慨的，通知书+银行卡+校园宣传册+卡套+鼠标垫+明信片。 . 通知书本体，传闻本科生的通知书有校长的亲签，到研究生这里就只剩研究生院的公章了，含金量大失格。 . 题外话，关于博客的图床考虑了几种方案，最终决定将图床放置在PKU BBS的服务器上，作为兼顾自由度和稳定性的选择。 . "
  },
  
  {
    "title": "Chirpy主题的进阶使用",
    "url": "/posts/customize-my-blog/",
    "date": "2024-04-22 16:45:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . 本文介绍Chirpy主题的几个进阶使用案例，包括自定义网页布局、优化文本搜索、配置评论系统等。其中一些案例会涉及到底层代码的修改，要求读者具备一定的编程基础。 . 关于Chirpy主题的安装、配置、基础使用等内容，请阅读Jekyll博客搭建教程（下篇）。 . 自定义网页布局 . Favicon设置 . Chirpy主题的favicon存放在目录assets/img/favicons/下，用户可以使用Favicon Generator生成favicon文件，再替换掉目录中的预设favicon即可。 . 语言和字体 . 博客的默认语言为英语，可以设置_config.yml中的lang变量来修改，变量取值详见ISO语言代码（如英语的lang取值为en，中文的lang取值为zh-CN）。 . 每种语言对应一套默认字体，如英语默认的标题字体为Lato，段落字体为Source Sans Pro。如果要自定义，需要修改样式文件_sass/addon.variables.scss，参考这篇说明。 . | 1 2 3 . | /* fonts */ $font-family-base: 'Source Sans Pro', 'Microsoft Yahei', 'PingFang SC', sans-serif !default; $font-family-heading: Lato, 'Microsoft Yahei', 'PingFang SC', sans-serif !default; . | . 至于为何会特意提到自定义字体，因为预设的中文字体太难看了，便改用了PingFang SC作为默认项。 . 侧边菜单栏排序 . 侧边菜单栏选项的默认排序为： . | HOME | CATEGORIES | TAGS | ARCHIVES | ABOUT | . 如果要更改顺序，则需前往_tabs目录修改相应文件。以archives选项为例，我们需要修改_tabs/archives.md： . | 1 2 3 4 5 . | --- layout: archives icon: fas fa-archive order: 3 --- . | . 其中，layout项表示前往_layouts目录，读取_layouts/archives.html作为网页模版；icon项表示使用fa-archive作为icon图标，更多图标详见Font Awesome 4；order项指定了选项在菜单栏中的顺序。 . 例如，我想把archives选项放在菜单栏的第一位，只需将order项设置为1。 . 创建和删除子页面 . 例如我希望在个人网站上创建一个留言板，放在网站子页/treehole/下。我们可以向_tabs目录添加模版文件_tabs/treehole.md来实现这一需求。 . | 1 2 3 4 5 . | --- layout: treehole icon: fas fa-tree order: 2 --- . | . 网站会自动生成子页面/treehole/，并读取_layouts/treehole.html作为该页面的模版，我们可以在模版文件treehole.html中写入自己想要的模块，给网页添加新的功能。以下是html模版的一个简单示例（没有添加任何模块，只是输出‘Hello, world!’）： . | 1 2 3 4 5 6 . | --- layout: page # The layout for Treehole page --- &lt;p&gt;Hello, world!&lt;/p&gt; . | . 同样如果想要删除某个子页面，比如标签页/tags/（因为我讨厌打标签），只需删除对应的模版文件_tabs/tags.md。 . 优化文本搜索 . 本节旨在讨论博客文本搜索功能的实现思路，并针对原搜索算法的不足提出一些改进优化。如果想在博客中更新文本搜索功能，可以fork我的博客仓库。 . 博客的文本搜索可分解为三个步骤： . | 读取用户输入的关键词 | 遍历博客的所有文章检索关键词 | 输出包含关键词的文章 | . Chirpy主题在博客中内置了文本搜索功能，使用的搜索算法是Christian Fei的Simple Jekyll Search。该算法的实现思路是创建一个文本数据集search.json，将每篇文章作为一级对象，文章的title、author、content等信息作为二级对象，写入json文件中。数据模版如下： . | 1 2 3 4 5 6 7 8 9 . | { { \"title\": \"post.title\", \"url\": \"post.url\", \"date\": \"post.date\", \"categories\": \"post.categories\", \"content\": \"post.content\" } } . | . 这样一来，要在博客的文章中检索关键词，不用到每个文章的html页面一一查找，只需遍历一遍json文件即可。虽然实现思路很好，但成品代码却一言难尽，而且原项目在2022年3月就停止维护了，也没法向作者提修改建议。 . 精准搜索 . 首当其冲的问题是Simple Jekyll Search居然不支持精准搜索，考虑下面这个例子。我想搜索所有包含短语let it go的文章，这个句子会出现在搜索结果中： . Let's take a photo here. I'll print it on my shirt and go to school. 这显然是不合理的，我希望三个单词作为一个整体在句中出现，而不是去分别检索三个单词： . Let it go, since tomorrow is another day. 查阅相关讨论，我发现文本的精准匹配这个问题，实际上已经被作者修复了： . | Simple-Jekyll-Search/issues/182 | Simple-Jekyll-Search/pull/166 | . 既然问题已经解决了，为什么搜索结果还是那么奇怪呢？仔细阅读项目代码，会发现非常坑的一点，作者虽然在源目录/src/更新了代码，却没有在终目录/dest/重新编译项目。 . | Q：bug修了吗？ A：修了 Q：修好了吗？ A：如修 | . 因此，我们需要重新编写搜索算法，并替换掉原先失效的算法库。具体步骤如下： . | 在assets/lib/simple-jekyll-search/simple-jekyll-search.js中重写精确匹配的搜索算法； | . | 1 2 3 4 5 6 7 8 9 . | function LiteralSearchStrategy () { this.matches = function (str, crit) { if (!str) return false str = str.toLowerCase() crit = crit.toLowerCase() return str.indexOf(crit) &gt;= 0 } } . | . | 使用在线转换将.js文件转成.min.js格式，生成的新文件保存至assets/lib/simple-jekyll-search/simple-jekyll-search.min.js； | 在_data/orginal/cors.yml中修改了搜索算法的引用地址。 | . | 1 2 3 . | search: # js: https://cdn.jsdelivr.net/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js js: /assets/lib/simple-jekyll-search/simple-jekyll-search.min.js . | . 此外，我对文本数据assets/js/data/search.json做了一些格式上的优化，使搜索结果更为精确，在此不做详细说明。 . 搜索结果展示 . 另一个问题是Simple Jekyll Search虽然能告诉你哪些文章包含关键词，但它不会显示关键词具体出现在文章的哪个位置。这是使用原Chirpy主题进行关键词检索的一个示例： . 可以看到，搜索引擎只是简单列出了包含关键词Chirpy的文章标题和简介，而实际上我更想知道关键词出现在文章中的哪个位置，以及提及该关键词的前后文。这篇博客提出了一种可行的优化思路：Simple Jekyll Search在完成全局搜索后，会输出所有包含关键词的文章。此时对这些文章再重复做一次关键词检索，记录下关键词在一篇文章中首次出现的位置，输出该位置向前数的50个字符（上文）和向后数的50个字符（下文）。 . 我在_includes/search_loader.html中实现了这个思路，以下是部分代码片段： . | 1 2 3 4 5 6 7 8 9 10 11 12 . | var input = document.getElementById(\"search-input\").value.toLowerCase(); let firstOccurrence = value.toLowerCase().indexOf(input); if (firstOccurrence != -1) { let start = firstOccurrence - 50; if (start &lt; 0) { start = 0; } while (start &gt; 0 &amp;&amp; value[start-1] != \" \" &amp;&amp; value[start-1] != \"，\" &amp;&amp; value[start-1] != \"。\") { start--; } return `${value.substring(start, firstOccurrence)}&lt;mark style=\"background-color: rgba(255, 255, 153, 0.5);\"&gt;${value.substring(firstOccurrence, firstOccurrence+input.length)}&lt;/mark&gt;${value.substring(firstOccurrence+input.length, start+250)}`; } . | . 优化后的搜索结果如图，改进后的算法能标注出关键词所在位置，并给出提及关键词的上下文。 . 配置评论系统 . Chirpy主题支持为文章添加评论系统，在config.yml的comments一项中设置，可选择的评论系统有 . | disqus | utterances | giscus | . 这里以giscus为例，说明如何在博客中开启评论。先在config.yml中声明开启gicus。 . | 1 2 3 . | comments: # Global switch for the post comment system. Keeping it empty means disabled. provider: giscus # [disqus | utterances | giscus] . | . 再前往giscus app，按网页要求进行操作： . | 将博客repository的访问权限设置为public； | 下载giscus； | 访问博客所在的repository，在Settings&gt;General&gt;Features一栏中勾选上Discussions。 | . 在giscus app中填入博客repository的地址，获取giscus的配置参数，填入config.yml中的对应项。 . | 1 2 3 4 5 6 7 8 9 10 11 . | # Giscus options › https://giscus.app giscus: repo: [ENTER REPO HERE] # &lt;gh-username&gt;/&lt;repo&gt; repo_id: [ENTER REPO ID HERE] category: [ENTER CATEGORY NAME HERE] category_id: [ENTER CATEGORY ID HERE] mapping: \"title\" # optional, default to 'pathname' strict: # optional, default to '0' input_position: \"top\" # optional, default to 'bottom' lang: # optional, default to the value of `site.lang` reactions_enabled: # optional, default to the value of `1` . | . 最后，重新生成静态网页并推送到GitHub仓库，就能在文章的评论区发表评论了。 . | 1 . | bundle exec jekyll s . | . 如果需要对giscus做更详细的配置，可在博客项目的根目录创建配置文件giscus.json，参考这篇giscus Advanced Usage进行配置。 . 结语 . 关于博客搭建的记录就此告一段落，希望我把教程写清楚了。最后感谢Chirpy为本站提供Jekyll主题，提供一些扩展阅读： . | Chirpy Wiki | 使用Chirpy模版进行Markdown写作 | Markdown渲染效果演示 | . "
  },
  
  {
    "title": "Jekyll博客搭建教程（下篇）",
    "url": "/posts/build-my-blog-2/",
    "date": "2024-04-21 20:17:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . Chirpy是一款基于Jekyll架构开发的主题模版，主要面向技术类博客的写作，这是该主题的一个Demo。本站的主题也是由Chirpy主题魔改而来。 . 本文以Chirpy主题为例，介绍如何在Jekyll博客中应用主题模版，并将博客网站部署到GitHub Page上。其他主题的应用方法可能略有不同，但总体思路是一致的。 . 下载主题 . Chirpy主题有两种下载方法： . | Chirpy Starter | Git | . 两种方法均会使用到Git，请事先配置好Git的使用环境。 . Chirpy Starter . 前往官方的模版页面Chirpy Start，点击按钮Use this template &gt; Create a new repository，将新的repository命名为USERNAME.github.io，其中USERNAME为GitHub用户名。 . 再将项目下载到本地，并安装依赖库。（记得将USERNAME替换为GitHub用户名） . | 1 2 . | git clone https://github.com/USERNAME/USERNAME.github.io bundle . | . 这个方法适合只想专心写文章不想接触底层代码的用户。用户无需关注原项目中那一大坨html模版和js脚本，只需将文章添加至_post目录中即可实现博客的更新。当然不能修改代码也意味着，如果你想在原模版的基础上做些个性化修改，或是添加新的功能，用这个方法是无法实现的。 . Git . 作为一个事多的人，只是套用模版而不做任何修改是无法满足我的需求的，因此我采用了第二种方法：用Git将整个项目下载至本地。这样便能直接修改源代码，实现我想要的功能。 . | 1 . | git clone https://github.com/cotes2020/jekyll-theme-chirpy . | . 由于后续操作会生成JavaScript文件，需事先安装Node.js。再前往项目所在目录，运行初始化程序。 . | 1 . | bash tools/init . | . 完成初始化后，还需安装依赖库。 . | 1 . | bundle . | . 配置主题 . 主要配置 . 博客的配置信息存放在根目录的./_config.yml，常用的变量有： . | lang - 语言 | timezone - 时区 | title - 网站标题 | tagline - 网站副标题 | description - 网站描述 | url - 部署博客的地址，如https://USERNAME.github.io | avatar - 作者头像，如https://chirpy-img.netlify.app/commons/avatar.jpg | . 可选配置 . 在子目录_data下还存放有一些可选填的配置文件，主要用于设置网页的外观，可根据需求修改。以下是对这些配置文件的简要说明： . 博客的语言配置存放在_data/locate/，其中英语的配置文件为_data/locate/en.yml。如下面这段配置定义了英文语言下侧边菜单栏的选项名称。 . | 1 2 3 4 5 6 7 8 . | tabs: # format: &lt;filename_without_extension&gt;: &lt;value&gt; home: Home categories: Categories tags: Tags treehole: Treehole archives: Archives about: About . | . 文章的作者信息存放在_data/authors.yml，可填写多个作者。 . | 1 2 3 . | MsEspeon: name: MsEspeon url: https://github.com/ittousei/ . | . 侧边菜单栏的社交账号信息存放在_data/contact.yml。比如我不想显示Twitter，只需在配置文件中注释掉相应内容。 . | 1 2 . | # - type: twitter # icon: \"fa-brands fa-x-twitter\" . | . 文章的分享信息存放在_data/share.yml。比如我想分享文章到Twitter，可在配置文件中添加以下内容。 . | 1 2 3 4 . | platforms: - type: Twitter icon: \"fa-brands fa-square-x-twitter\" link: \"https://twitter.com/intent/tweet?text=TITLE&amp;url=URL\" . | . 本地测试 . 在服务器上部署博客前，可以先在本地http://localhost:4000预览网页的效果。 . | 1 . | bundle exec jekyll s . | . 注意：以上命令包含两个功能，一是根据项目文件生成静态网页文件，二是将静态网页部署至本地服务器。因此，在将博客部署到远程服务器之前，即使没有本地测试的需求，仍需运行一遍上述命令，以生成必要的静态网页文件。 . 部署至GitHub Page . 在实现本地运行后，我们将博客部署到GitHub Page上。在部署之前，我们需要做好以下准备工作： . | 在GitHub上创建博客专用的repository，并命名为USERNAME.github.io，USERNAME为GitHub用户名。 | 将本地的Chirpy-Jekyll项目关联至GitHub的仓库USERNAME.github.io。这一步我使用的是GitHub Desktop，一款基于Git的图形化界面，相对于Git更为简单易用，当然直接使用Git也能实现关联操作。 | 在本地项目的根目录运行： | . | 1 . | bundle lock --add-platform x86_64-linux . | . 然后，我们到GitHub上配置Page服务： . | 访问博客所在仓库USERNAME.github.io，点击Settings，在左侧菜单栏中选中Pages，再到Build and deployment的Source一栏选中GitHub Actions选项。 | . | 在GitHub Actions选项的下方将出现配置文件GitHub Pages Jekyll，点击Configure按钮，会显示配置文件的具体内容，再点击文件右上角的Commit changes...，即可在仓库中生成配置文件。 . | 最后，我们将配置文件同步到本地。完成上述步骤后，只要我们将代码push到GitHub的仓库中，GitHub Actions便会自动生成静态网页并部署到GitHub Page上。 . | . 如果需要在个人服务器上部署博客，可参考Chirpy官方文档，在本教程中不做额外说明。 . 更新博客 . 如果要在博客上发布新的文章，只需遵循以下步骤： . | 在_posts目录中添加新的Markdown文件。 | 执行命令生成静态网页： | . | 1 . | bundle exec jekyll s . | . | 推送至GitHub仓库，更新后的网页会自动部署到GitHub Page上。 | . 结语 . 通过简单的三步，我们实现了个人博客的搭建： . | 安装Jekyll框架生成博客的静态网页 | 应用Chirpy主题设置博客的布局 | 使用GitHub Page部署个人网站 | . 回顾下来，整个博客搭建的过程还是相当水到渠成的，没有遇上重大bug。当然，之所以过程这么顺利，是因为去年我已经尝试过使用Hexo搭建个人网站，不过当时的我十分头铁，妄图自己写一套网站的前端（此前没有前端经验，主要使用ChatGPT进行前端开发）。 . 结果也在预料之中，起初我对这个项目颇有兴致，然而随着开发的深入，bug接二连三的出现，我更新代码的频率也逐渐降低，后来我的旧电脑不幸故障无法开机，又换了新的MacBook，忙于配置新的电脑，这个旧电脑上的前端项目于是便不了了之了。 . 有点偏题了，说回正题。这次博客的搭建历时两天，4.19完成了Chirpy主题的应用和GitHub Page的部署，4.20实现博客布局的个性化、优化搜索算法、以及添加评论系统。本教程主要记录了4.19的工作，4.20主要是一些基于个人审美而做的改动，在本文的后续Chirpy主题的进阶使用中说明。最后，就简单用一句话收尾吧： . 搭建个人博客很简单，因为我们站在巨人的肩膀上。 "
  },
  
  {
    "title": "Jekyll博客搭建教程（上篇）",
    "url": "/posts/build-my-blog-1/",
    "date": "2024-04-21 12:10:00 +0800",
    "categories": "Tutorial, Jekyll",
    "content": "前言 . Jekyll是一个轻量级的静态网站生成器，它采用Liquid作为模板语言，支持用户自定义网页的外观布局、使用Markdown创作发布内容。本文介绍如何使用Jekyll搭建个人网站，内容参考自Jekyll的说明文档。 . 环境安装 . Jekyll要求安装以下环境： . | Ruby | RubyGems | Jekyll | . 我的操作系统是Ventura(macOS 13)，因此主要基于mac的安装流程进行说明，其他系统的安装步骤类似，这里仅给出文档链接不做具体说明。 . 安装Ruby和RubyGems . Ruby的安装详见Jekyll Installation。根据需求选择合适的版本，Jekyll要求Ruby版本高于2.5.0，本文使用的版本为3.1.3。RubyGems捆绑在Ruby的安装包中，无需额外下载。 . 对于Windows/Linux等系统，请按照Jekyll文档的说明进行安装，并跳过本章节阅读下一章使用Jekyll搭建博客。 . 在macOS下，可使用ruby-install安装Ruby，和使用chruby配置环境： . | 安装Homebrew | . | 1 . | /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" . | . | 使用Homebrew安装chruby和ruby-install | . | 1 . | brew install chruby ruby-install xz . | . | 使用ruby-install安装Ruby | . | 1 . | ruby-install ruby 3.1.3 . | . | 使用chruby配置环境 | . | 1 2 3 . | echo \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.zshrc echo \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.zshrc echo \"chruby ruby-3.1.3\" &gt;&gt; ~/.zshrc # run 'chruby' to see actual version . | . | 检查安装是否成功 | . 退出并重启（注意要重开一个窗口）Terminal终端，运行以下命令： . | 1 . | ruby -v . | . 运行结果显示ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e)（或是更高版本）即安装成功。 . 安装Jekyll . 使用Ruby的包管理器RubyGems可直接下载Jekyll。 . | 1 . | gem install jekyll . | . 使用Jekyll搭建博客 . 在上一节中我们安装了前置环境，现在我们创建一个Jekyll项目来生成博客网页。 . 我们选择Bundle来管理Jekyll的项目环境。对于不同的Jekyll项目，可以用Bundle分别搭建独立的依赖环境，而不相互干扰。使用Bundle创建Jekyll项目的流程如下： . | 使用RubyGems下载bundle | . | 1 . | gem install bundler . | . | 在./myblog路径下创建Jekyll项目 | . | 1 2 . | jekyll new myblog cd myblog . | . | 运行项目生成博客网页 | . | 1 . | bundle exec jekyll serve . | . 可以在http://localhost:4000本地浏览网页。 . 自定义博客外观 . 通过创建Jekyll项目，我们生成了一个简易的网站。当然这个网站十分简陋，和一个功能完备的现代博客相去甚远，下一步就是美化网页的外观以及添加更多的功能了。 . 一个选择是自己写一套前端，可以参考这篇教程Step by Step Tutorial，其中的工作量无疑是巨大的。另一个选择是使用别人写好的模版，Jekyll拥有成熟的主题开发生态，用户可以从海量的主题模版中挑选出适合自己的那一款。我们可以在他人模版的基础上，根据自己的需求做一些自定义修改。 . 下面列出一些常用Jekyll主题站点： . | GitHub.com #jekyll-theme repos | jamstackthemes.dev | http://jekyllthemes.org/ | https://jekyllthemes.io/ | jekyll-themes.com | . 关于主题设置的更多内容，参考Jekyll Themes。在下篇中，我将详细介绍本站采用的主题，即Chirpy主题的配置和使用。 . "
  }
  
]

